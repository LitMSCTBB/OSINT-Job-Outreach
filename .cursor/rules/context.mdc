---
description: 
globs: 
alwaysApply: true
---
---
title: Outreach Tool – Cursor Context
---

# 🎯 Project Summary

This internal tool helps automate cold outreach. Users add people or companies, the backend enriches them with online data, and the system drafts personalized emails using GPT. Users review and finalize outreach from a React dashboard.

The stack is:
- Frontend: React + Vite + Tailwind CSS
- Backend: FastAPI (async), Python 3.11+

---

## 🧠 Development Style

We use a **comment-first, cursor-driven** coding flow:
- Developers leave inline `// CURSOR:` or `// TODO(cursor):` comments
- Cursor then fills in logic when the developer hits `Tab`
- This enables fast ideation without over-committing code

**Example**
```tsx
// CURSOR: Show a button if person.status === 'draft_ready'
```

## 🖼️ UI Structure & Expectations

The UI is a two-column layout with a top control bar:

### 🔹 Top Bar
- Contains two buttons: **Add Person** and **Add Company**
- Buttons should be accessible via keyboard shortcut (e.g. `/`, `Cmd+K`)
- “Add Person” opens a form to input LinkedIn, Twitter, Notes, and Domain manually
- “Add Company” accepts a company LinkedIn URL and populates person records below it

### ⬅️ Left Column: Incomplete Entries
- Contains cards for:
  - Standalone people (added manually) who have not yet been processed
  - A single **company card** which, when filled, loads a list of people
- People shown here are in `pending` or `processing` state
- Each card allows editing metadata and triggering processing (`POST /start/{id}`)

### ➡️ Right Column: Review Drafts
- Contains person cards in the `draft_ready` state
- Shows the generated draft email and optionally the Twitter message
- Includes buttons to:
  - Edit and approve the draft
  - Send the finalized message via backend endpoint

This layout ensures clarity between new leads and leads ready for outreach.

---

## 💻 Frontend Guidelines

- **Tech**: React + Vite + TypeScript
- Use `useEffect()` for data loading
- Use `axios` and `import.meta.env.VITE_API_URL`
- Use Tailwind utilities for styling
- Avoid inline styles like `style={{}}`
- Component naming: `PascalCase` for components, `camelCase` for vars/functions
- Directory: all UI blocks go in `src/components/`

---

## 🐍 Backend Guidelines

- Framework: FastAPI
- All endpoints are `async def`
- Use `snake_case` for route names: `@app.get("/start_process")`
- Person objects:
  - Include: `id`, `name`, `linkedin`, `twitter`, `domain`, `status`
  - Status flow: `pending → processing → draft_ready → completed`

---

## 🔧 Example Backend Flow

1. `POST /add` — Add a new person
2. `GET /people` — View all people
3. `POST /start/{id}` — Begin enrichment & draft generation
4. `POST /finalize/{id}` — Finalize and send outreach

---

## ✅ Cursor Should Help Me With

When I'm working in files, Cursor should:
- Offer structured scaffolds as comments, not full code blocks
- Reflect our status flow, component layout, and naming conventions
- Show examples that match our architecture (React + FastAPI)
- Avoid suggesting over-engineered solutions
- Default to small, composable logic pieces
